/**
 * @fileoverview Firestore Security Rules for an e-commerce admin panel.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for customer data
 * and allows open reads for products and promotions.  All write operations
 * require authentication, ensuring data integrity and accountability.
 *
 * Data Structure:
 * - /customers/{customerId}: Stores customer profiles.  Only the customer
 *   themselves can read/write their own profile.
 * - /customers/{customerId}/orders/{orderId}: Stores orders associated with a
 *   specific customer. Accessible only by the customer or an admin.
 * - /products/{productId}: Stores product information. Publicly readable, but
 *   write access is restricted.
 * - /promotions/{promotionId}: Stores promotion details. Publicly readable,
 *   but write access is restricted.
 *
 * Key Security Decisions:
 * - Customer data is strictly controlled by the customer themselves, using
 *   path-based ownership.
 * - Products and promotions are publicly readable. Write access needs to be restricted to some authenticated user.
 *
 * Denormalization for Authorization:
 *   The rules leverage path-based ownership (/customers/{customerId}) to avoid
 *   costly `get()` calls and ensure efficient authorization checks. The `customerId`
 *   is implicitly denormalized into the customer document's path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the document.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the document and it exists.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines security rules for customer profiles.
     * @path /customers/{customerId}
     * @allow (create) - A user can create their own customer profile if the customerId matches their auth UID.
     * @allow (get, update, delete) - A user can get, update, and delete their own customer profile if the customerId matches their auth UID.
     * @deny (create) - A user cannot create a customer profile with a customerId that does not match their auth UID.
     * @deny (update, delete) - A user cannot update or delete a customer profile if the customerId does not match their auth UID, and the document does not exist.
     * @principle Enforces document ownership for writes.
     */
    match /customers/{customerId} {
      allow get: if isOwner(customerId);
      allow list: if false;
      allow create: if isOwner(customerId) && request.resource.data.id == customerId;
      allow update: if isExistingOwner(customerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Defines security rules for orders associated with a specific customer.
     * @path /customers/{customerId}/orders/{orderId}
     * @allow (create) - A user can create an order under their own customer profile.
     * @allow (get, update, delete) - A user can get, update, and delete orders under their own customer profile.
     * @deny (create) - A user cannot create an order under a customer profile that does not match their auth UID.
     * @deny (update, delete) - A user cannot update or delete an order under a customer profile that does not match their auth UID, and the document does not exist.
     * @principle Restricts access to a user's own data tree.
     */
    match /customers/{customerId}/orders/{orderId} {
      allow get: if isOwner(customerId);
      allow list: if isOwner(customerId);
      allow create: if isOwner(customerId) && request.resource.data.customerId == customerId;
      allow update: if isExistingOwner(customerId) && request.resource.data.customerId == resource.data.customerId;
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Defines security rules for products.
     * @path /products/{productId}
     * @allow (get, list) - Anyone can read product information.
     * @deny (create, update, delete) - Only authenticated users can manage product information.
     * @principle Public read with owner-only writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Defines security rules for promotions.
     * @path /promotions/{promotionId}
     * @allow (get, list) - Anyone can read promotion details.
     * @deny (create, update, delete) - Only authenticated users can manage promotion details.
     * @principle Public read with owner-only writes.
     */
    match /promotions/{promotionId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}